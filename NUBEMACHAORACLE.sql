-- Eliminar las tablas en el orden correcto para evitar errores de dependencia
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE detalle_venta CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE ventas CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE productos CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE categorias CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE pagos CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE citas CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE usuario CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        NULL; -- Ignorar errores si las tablas no existen
END;
/

-- Crear la tabla usuario
CREATE TABLE usuario (
    id_usuario NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tipoDeDocumento VARCHAR2(50) CHECK (tipoDeDocumento IN ('dni', 'cne')),
    numeroDeDocumento VARCHAR2(20),
    nombre VARCHAR2(100) NOT NULL,
    apellido VARCHAR2(100) NOT NULL,
    celular VARCHAR2(9) CHECK (celular LIKE '9%' AND LENGTH(celular) = 9),
    email VARCHAR2(100) UNIQUE,
    password VARCHAR2(100),
    rol VARCHAR2(50) CHECK (rol IN ('cliente', 'admin', 'barbero')),
    activo NUMBER(1) DEFAULT 1,
    CONSTRAINT CK_NumeroDeDocumento CHECK (
        (tipoDeDocumento = 'dni' AND LENGTH(numeroDeDocumento) = 8) OR
        (tipoDeDocumento = 'cne' AND LENGTH(numeroDeDocumento) BETWEEN 9 AND 20)
    )
);

SELECT sequence_name FROM user_sequences WHERE sequence_name = 'USUARIO_SEQ';

DROP SEQUENCE usuario_seq;

CREATE SEQUENCE usuario_seq START WITH 1 INCREMENT BY 1;

DESCRIBE usuario;

SELECT usuario_seq.nextval FROM dual;


-- Crear otras tablas...
-- Tabla citas
CREATE TABLE citas (
    id_cita NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    fecha DATE NOT NULL,
    hora VARCHAR2(8) NOT NULL,
    nota VARCHAR2(100),
    estado VARCHAR2(50) CHECK (estado IN ('pendiente', 'cancelado', 'terminado')),
    id_cliente NUMBER NOT NULL,
    id_barbero NUMBER NOT NULL,
    CONSTRAINT fk_cita_cliente FOREIGN KEY (id_cliente) REFERENCES usuario(id_usuario),
    CONSTRAINT fk_cita_barbero FOREIGN KEY (id_barbero) REFERENCES usuario(id_usuario)
);

-- Tabla pagos
CREATE TABLE pagos (
    id_pago NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_cita NUMBER NOT NULL,
    corte_realizado VARCHAR2(100) NOT NULL,
    monto NUMBER(10, 2) NOT NULL CHECK (monto > 0),
    fecha_pago DATE NOT NULL,
    hora_pago VARCHAR2(8) NOT NULL,
    status NUMBER(1) DEFAULT 1,
    CONSTRAINT fk_pago_cita FOREIGN KEY (id_cita) REFERENCES citas(id_cita)
);

-- Tabla categorías
CREATE TABLE categorias (
    id_categoria NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(50) NOT NULL UNIQUE
);

-- Tabla productos
CREATE TABLE productos (
    id_producto NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    imagen VARCHAR2(255),
    nombre VARCHAR2(100) NOT NULL,
    descripcion VARCHAR2(4000),
    precio NUMBER(10, 2) NOT NULL CHECK (precio > 0),
    id_categoria NUMBER NOT NULL,
    estado NUMBER(1) DEFAULT 1,
    CONSTRAINT fk_producto_categoria FOREIGN KEY (id_categoria) REFERENCES categorias(id_categoria)
);

-- Tabla ventas
CREATE TABLE ventas (
    id_venta NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_usuario NUMBER,
    fecha_venta DATE,
    monto_total NUMBER(10, 2),
    CONSTRAINT fk_ventas_usuario FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario)
);

-- Tabla detalle_venta
CREATE TABLE detalle_venta (
    id_detalle_venta NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_venta NUMBER,
    id_producto NUMBER,
    cantidad NUMBER(10, 2),
    precio_unitario NUMBER(10, 2),
    subtotal NUMBER(10, 2),
    CONSTRAINT fk_detalle_venta_venta FOREIGN KEY (id_venta) REFERENCES ventas(id_venta),
    CONSTRAINT fk_detalle_venta_producto FOREIGN KEY (id_producto) REFERENCES productos(id_producto)
);

-- Creación de triggers y procedimientos actualizados

CREATE OR REPLACE TRIGGER trg_usuario_prevenir_eliminacion
BEFORE DELETE ON usuario
FOR EACH ROW
BEGIN
    -- Prevenir la eliminación directa
    RAISE_APPLICATION_ERROR(-20001, 'Eliminación física no permitida. Use el procedimiento para eliminación lógica.');
END;

CREATE OR REPLACE PROCEDURE eliminar_usuario_logicamente (p_id_usuario IN NUMBER) AS
BEGIN
    UPDATE usuario
    SET activo = 0
    WHERE id_usuario = p_id_usuario
      AND activo = 1; -- Solo inactiva usuarios activos
END;

BEGIN
    eliminar_usuario_logicamente(1); -- Cambia '1' por el ID del usuario que quieres inactivar
END;


-- Trigger para actualización automática de estado en citas
CREATE OR REPLACE TRIGGER trg_actualizar_estado_cita
AFTER INSERT ON pagos
FOR EACH ROW
BEGIN
    UPDATE citas
    SET estado = 'terminado'
    WHERE id_cita = :NEW.id_cita;
END;

-- Solución: Trigger para prevenir la eliminación física en pagos

CREATE OR REPLACE TRIGGER trg_pago_prevenir_eliminacion
BEFORE DELETE ON pagos
FOR EACH ROW
BEGIN
    -- Prevenir la eliminación directa
    RAISE_APPLICATION_ERROR(-20001, 'Eliminación física no permitida. Use el procedimiento para eliminación lógica.');
END;

-- Procedimiento para realizar la eliminación lógica en pagos

-- A continuación, crea un procedimiento que realice la eliminación lógica actualizando el campo status a 0 para marcar el registro como inactivo.

CREATE OR REPLACE PROCEDURE eliminar_pago_logicamente (p_id_pago IN NUMBER) AS
BEGIN
    UPDATE pagos
    SET status = 0
    WHERE id_pago = p_id_pago
      AND status = 1; -- Solo inactiva pagos activos
END;

-- Uso del procedimiento
-- Para marcar un pago como eliminado (inactivarlo), usa la siguiente llamada al procedimiento:
BEGIN
    eliminar_pago_logicamente(1); -- Cambia '1' por el ID del pago que quieres inactivar
END;



-- Procedimiento para actualizar el estado de la cita
CREATE OR REPLACE PROCEDURE actualizar_estado_cita (p_id_cita IN NUMBER, p_nuevo_estado IN VARCHAR2) AS
BEGIN
    UPDATE citas
    SET estado = p_nuevo_estado
    WHERE id_cita = p_id_cita AND estado = 'pendiente';
END;

-- Procedimiento para registrar pago y actualizar estado de la cita
CREATE OR REPLACE PROCEDURE registrar_pago (
    p_id_cita IN NUMBER,
    p_corte_realizado IN VARCHAR2,
    p_monto IN NUMBER,
    p_fecha_pago IN DATE,
    p_hora_pago IN VARCHAR2
) AS
BEGIN
    -- Insertar el pago
    INSERT INTO pagos (id_cita, corte_realizado, monto, fecha_pago, hora_pago, status)
    VALUES (p_id_cita, p_corte_realizado, p_monto, p_fecha_pago, p_hora_pago, 1);

    -- Actualizar estado de la cita
    UPDATE citas
    SET estado = 'terminado'
    WHERE id_cita = p_id_cita;
END;

-- Inserciones en usuario

-- Inserciones en la tabla usuario
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('dni', '12345678', 'Juan', 'Perez', '912345678', 'juan.perez@example.com', 'password1', 'cliente', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('dni', '87654321', 'Maria', 'Gomez', '987654321', 'maria.gomez@example.com', 'password2', 'admin', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('cne', '1234567890', 'Carlos', 'Lopez', '934567890', 'carlos.lopez@example.com', 'password3', 'barbero', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('dni', '11223344', 'Ana', 'Diaz', '945678123', 'ana.diaz@example.com', 'password4', 'cliente', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('dni', '55667788', 'Luis', 'Martinez', '912345123', 'luis.martinez@example.com', 'password5', 'cliente', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('cne', '9876543210', 'Sofia', 'Ramirez', '987654567', 'sofia.ramirez@example.com', 'password6', 'admin', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('dni', '77889900', 'Miguel', 'Sanchez', '934567123', 'miguel.sanchez@example.com', 'password7', 'barbero', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('cne', '3456789012', 'Laura', 'Jimenez', '945678890', 'laura.jimenez@example.com', 'password8', 'cliente', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('dni', '22334455', 'Pedro', 'Castro', '912345890', 'pedro.castro@example.com', 'password9', 'barbero', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('dni', '33445566', 'Carmen', 'Vega', '987654234', 'carmen.vega@example.com', 'password10', 'cliente', 1);

-- Inserciones en citas

-- Inserciones en la tabla citas
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (SYSDATE, '10:00', 'Corte básico', 'pendiente', 1, 3);
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (SYSDATE + 1, '11:00', 'Corte avanzado', 'pendiente', 4, 7);
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (SYSDATE + 2, '12:00', 'Corte y tinte', 'pendiente', 5, 9);
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (SYSDATE + 3, '13:00', 'Corte de barba', 'pendiente', 8, 3);
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (SYSDATE + 4, '14:00', 'Corte de cabello y barba', 'pendiente', 6, 7);
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (SYSDATE + 5, '15:00', 'Corte moderno', 'pendiente', 2, 9);
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (SYSDATE + 6, '16:00', 'Corte infantil', 'pendiente', 10, 3);
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (SYSDATE + 7, '17:00', 'Corte clásico', 'pendiente', 9, 7);
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (SYSDATE + 8, '18:00', 'Corte y peinado', 'pendiente', 1, 9);
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (SYSDATE + 9, '19:00', 'Corte de verano', 'pendiente', 5, 3);

-- Inserciones en pagos

select * from citas;

-- Inserciones en la tabla pagos
INSERT INTO pagos (id_cita, corte_realizado, monto, fecha_pago, hora_pago, status) VALUES (1, 'Corte básico realizado', 50.00, SYSDATE, '10:30', 1);
INSERT INTO pagos (id_cita, corte_realizado, monto, fecha_pago, hora_pago, status) VALUES (2, 'Corte avanzado realizado', 75.00, SYSDATE + 1, '11:30', 1);
INSERT INTO pagos (id_cita, corte_realizado, monto, fecha_pago, hora_pago, status) VALUES (3, 'Corte y tinte realizado', 100.00, SYSDATE + 2, '12:30', 1);
INSERT INTO pagos (id_cita, corte_realizado, monto, fecha_pago, hora_pago, status) VALUES (4, 'Corte de barba realizado', 30.00, SYSDATE + 3, '13:30', 1);
INSERT INTO pagos (id_cita, corte_realizado, monto, fecha_pago, hora_pago, status) VALUES (5, 'Corte de cabello y barba realizado', 90.00, SYSDATE + 4, '14:30', 1);
INSERT INTO pagos (id_cita, corte_realizado, monto, fecha_pago, hora_pago, status) VALUES (6, 'Corte moderno realizado', 80.00, SYSDATE + 5, '15:30', 1);
INSERT INTO pagos (id_cita, corte_realizado, monto, fecha_pago, hora_pago, status) VALUES (7, 'Corte infantil realizado', 40.00, SYSDATE + 6, '16:30', 1);
INSERT INTO pagos (id_cita, corte_realizado, monto, fecha_pago, hora_pago, status) VALUES (8, 'Corte clásico realizado', 60.00, SYSDATE + 7, '17:30', 1);
INSERT INTO pagos (id_cita, corte_realizado, monto, fecha_pago, hora_pago, status) VALUES (9, 'Corte y peinado realizado', 85.00, SYSDATE + 8, '18:30', 1);
INSERT INTO pagos (id_cita, corte_realizado, monto, fecha_pago, hora_pago, status) VALUES (10, 'Corte de verano realizado', 70.00, SYSDATE + 9, '19:30', 1);

select * from usuario;
select * from pagos;
select * from citas;


