-- Eliminar las tablas en el orden correcto para evitar errores de dependencia
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE detalle_venta CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE ventas CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE productos CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE categorias CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE pagos CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE citas CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE usuario CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        NULL; -- Ignorar errores si las tablas no existen
END;
/

-- Crear la tabla usuario
CREATE TABLE usuario (
    id_usuario NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tipoDeDocumento VARCHAR2(50) CHECK (tipoDeDocumento IN ('dni', 'cne')),
    numeroDeDocumento VARCHAR2(20),
    nombre VARCHAR2(100) NOT NULL,
    apellido VARCHAR2(100) NOT NULL,
    celular VARCHAR2(9) CHECK (celular LIKE '9%' AND LENGTH(celular) = 9),
    email VARCHAR2(100) UNIQUE,
    password VARCHAR2(100),
    rol VARCHAR2(50) CHECK (rol IN ('cliente', 'admin', 'barbero')),
    activo NUMBER(1) DEFAULT 1,
    CONSTRAINT CK_NumeroDeDocumento CHECK (
        (tipoDeDocumento = 'dni' AND LENGTH(numeroDeDocumento) = 8) OR
        (tipoDeDocumento = 'cne' AND LENGTH(numeroDeDocumento) BETWEEN 9 AND 20)
    )
);


select * from usuario;

-- Crear otras tablas...
-- Tabla citas
CREATE TABLE citas (
    id_cita NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    fecha DATE NOT NULL,
    hora VARCHAR2(8) NOT NULL,
    nota VARCHAR2(100),
    estado VARCHAR2(50) CHECK (estado IN ('pendiente', 'cancelado', 'terminado')),
    id_cliente NUMBER NOT NULL,
    id_barbero NUMBER NOT NULL,
    CONSTRAINT fk_cita_cliente FOREIGN KEY (id_cliente) REFERENCES usuario(id_usuario),
    CONSTRAINT fk_cita_barbero FOREIGN KEY (id_barbero) REFERENCES usuario(id_usuario)
);

-- Tabla pagos
CREATE TABLE pagos (
    id_pago NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_cita NUMBER NOT NULL,
    corte_realizado VARCHAR2(100) NOT NULL,
    monto NUMBER(10, 2) NOT NULL CHECK (monto > 0),
    fecha_pago DATE NOT NULL,
    hora_pago VARCHAR2(8) NOT NULL,
    status NUMBER(1) DEFAULT 1,
    CONSTRAINT fk_pago_cita FOREIGN KEY (id_cita) REFERENCES citas(id_cita)
);


-- Tabla categorías
CREATE TABLE categorias (
    id_categoria NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(50) NOT NULL UNIQUE
);

-- Tabla productos con campos adicionales
CREATE TABLE productos (
    id_producto NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    imagen VARCHAR2(255),
    nombre VARCHAR2(100) NOT NULL,
    descripcion VARCHAR2(4000),
    precio NUMBER(10, 2) NOT NULL CHECK (precio > 0),
    stock NUMBER(10, 2) DEFAULT 0 CHECK (stock >= 0),
    unidad_medida VARCHAR2(20) CHECK (unidad_medida IN ('litros', 'gramos', 'unidades')),
    fecha_ingreso DATE DEFAULT SYSDATE,
    fecha_expiracion DATE,
    estado NUMBER(1) DEFAULT 1 CHECK (estado IN (0, 1)),
    id_categoria NUMBER NOT NULL,
    CONSTRAINT fk_producto_categoria FOREIGN KEY (id_categoria) REFERENCES categorias(id_categoria)
);

select * from productos;
select * from citas;
select * from pagos;
select * from usuario;

-- Tabla ventas
CREATE TABLE ventas (
    id_venta NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_usuario NUMBER,
    fecha_venta DATE DEFAULT SYSDATE,
    monto_total NUMBER(10, 2),
    CONSTRAINT fk_ventas_usuario FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario)
);

-- Tabla detalle_venta con trigger de stock
CREATE TABLE detalle_venta (
    id_detalle_venta NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_venta NUMBER,
    id_producto NUMBER,
    cantidad NUMBER(10, 2) CHECK (cantidad > 0),
    precio_unitario NUMBER(10, 2),
    subtotal NUMBER(10, 2),
    CONSTRAINT fk_detalle_venta_venta FOREIGN KEY (id_venta) REFERENCES ventas(id_venta),
    CONSTRAINT fk_detalle_venta_producto FOREIGN KEY (id_producto) REFERENCES productos(id_producto)
);

-- Trigger para reducir el stock cuando se registra una venta
CREATE OR REPLACE TRIGGER trg_actualizar_stock
BEFORE INSERT ON detalle_venta
FOR EACH ROW 
DECLARE
    v_stock productos.stock%TYPE;
BEGIN
    -- Verificar el stock actual
    SELECT stock INTO v_stock FROM productos WHERE id_producto = :NEW.id_producto;

    IF v_stock < :NEW.cantidad THEN
        RAISE_APPLICATION_ERROR(-20002, 'Stock insuficiente para realizar la venta');
    ELSE
        -- Actualizar el stock del producto
        UPDATE productos
        SET stock = stock - :NEW.cantidad
        WHERE id_producto = :NEW.id_producto;
    END IF;
END;


CREATE OR REPLACE PROCEDURE registrar_venta(
    p_id_usuario IN NUMBER,
    p_productos IN SYS_REFCURSOR,
    p_monto_total OUT NUMBER
) AS
    v_id_venta NUMBER;
    v_total NUMBER := 0;
    v_id_producto NUMBER;
    v_cantidad NUMBER;
    v_precio_unitario NUMBER;
BEGIN
    -- Crear la venta
    INSERT INTO ventas (id_usuario) VALUES (p_id_usuario) RETURNING id_venta INTO v_id_venta;

    -- Procesar cada producto en la venta
    LOOP
        FETCH p_productos INTO v_id_producto, v_cantidad, v_precio_unitario;
        EXIT WHEN p_productos%NOTFOUND;

        INSERT INTO detalle_venta (id_venta, id_producto, cantidad, precio_unitario, subtotal)
        VALUES (v_id_venta, v_id_producto, v_cantidad, v_precio_unitario, v_cantidad * v_precio_unitario);

        -- Sumar el subtotal al total de la venta
        v_total := v_total + (v_cantidad * v_precio_unitario);
    END LOOP;

    -- Finalizar el cursor
    CLOSE p_productos;

    -- Actualizar el monto total de la venta
    UPDATE ventas SET monto_total = v_total WHERE id_venta = v_id_venta;

    -- Devolver el total de la venta
    p_monto_total := v_total;
END registrar_venta;


CREATE OR REPLACE TRIGGER trg_usuario_prevenir_eliminacion
BEFORE DELETE ON usuario
FOR EACH ROW
BEGIN
    -- Prevenir la eliminación directa
    RAISE_APPLICATION_ERROR(-20001, 'Eliminación física no permitida. Use el procedimiento para eliminación lógica.');
END;


CREATE OR REPLACE PROCEDURE eliminar_usuario_logicamente (p_id_usuario IN NUMBER) AS
BEGIN
    UPDATE usuario
    SET activo = 0
    WHERE id_usuario = p_id_usuario
      AND activo = 1; -- Solo inactiva usuarios activos
END;


BEGIN
    eliminar_usuario_logicamente(1); -- Cambia '1' por el ID del usuario que quieres inactivar
END;


-- Trigger para actualización automática de estado en citas
CREATE OR REPLACE TRIGGER trg_actualizar_estado_cita
AFTER INSERT ON pagos
FOR EACH ROW
BEGIN
    UPDATE citas
    SET estado = 'terminado'
    WHERE id_cita = :NEW.id_cita;
END;

-- Solución: Trigger para prevenir la eliminación física en pagos

CREATE OR REPLACE TRIGGER trg_pago_prevenir_eliminacion
BEFORE DELETE ON pagos
FOR EACH ROW
BEGIN
    -- Prevenir la eliminación directa
    RAISE_APPLICATION_ERROR(-20001, 'Eliminación física no permitida. Use el procedimiento para eliminación lógica.');
END;


CREATE OR REPLACE PROCEDURE eliminar_pago_logicamente (p_id_pago IN NUMBER) AS
BEGIN
    UPDATE pagos
    SET status = 0
    WHERE id_pago = p_id_pago
      AND status = 1; -- Solo inactiva pagos activos
END;

-- Uso del procedimiento
-- Para marcar un pago como eliminado (inactivarlo), usa la siguiente llamada al procedimiento:
BEGIN
    eliminar_pago_logicamente(1); -- Cambia '1' por el ID del pago que quieres inactivar
END;

-- Procedimiento para actualizar el estado de la cita
CREATE OR REPLACE PROCEDURE actualizar_estado_cita (p_id_cita IN NUMBER, p_nuevo_estado IN VARCHAR2) AS
BEGIN
    UPDATE citas
    SET estado = p_nuevo_estado
    WHERE id_cita = p_id_cita AND estado = 'pendiente';
END;


CREATE OR REPLACE PROCEDURE registrar_pago (
    p_id_cita IN NUMBER,
    p_corte_realizado IN VARCHAR2,
    p_monto IN NUMBER,
    p_fecha_pago IN DATE,
    p_hora_pago IN VARCHAR2
) AS
BEGIN
    -- Insertar el pago
    INSERT INTO pagos (id_cita, corte_realizado, monto, fecha_pago, hora_pago, status)
    VALUES (p_id_cita, p_corte_realizado, p_monto, p_fecha_pago, p_hora_pago, 1);

    -- Actualizar estado de la cita
    UPDATE citas
    SET estado = 'terminado'
    WHERE id_cita = p_id_cita;
    
    -- Asegurarse de que la actualización fue exitosa
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No se encontró la cita con el ID: ' || p_id_cita);
    END IF;
    
    -- Commit explícito, si es necesario (opcional)
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error al registrar el pago: ' || SQLERRM);
END;


-- Inserciones en usuario

-- Inserciones en la tabla usuario
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('dni', '12345678', 'Juan', 'Perez', '912345678', 'juan.perez@example.com', 'password1', 'cliente', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('dni', '87654321', 'Maria', 'Gomez', '987654321', 'maria.gomez@example.com', 'password2', 'admin', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('cne', '1234567890', 'Carlos', 'Lopez', '934567890', 'carlos.lopez@example.com', 'password3', 'barbero', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('dni', '11223344', 'Ana', 'Diaz', '945678123', 'ana.diaz@example.com', 'password4', 'cliente', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('dni', '55667788', 'Luis', 'Martinez', '912345123', 'luis.martinez@example.com', 'password5', 'cliente', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('cne', '9876543210', 'Sofia', 'Ramirez', '987654567', 'sofia.ramirez@example.com', 'password6', 'admin', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('dni', '77889900', 'Miguel', 'Sanchez', '934567123', 'miguel.sanchez@example.com', 'password7', 'barbero', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('cne', '3456789012', 'Laura', 'Jimenez', '945678890', 'laura.jimenez@example.com', 'password8', 'cliente', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('dni', '22334455', 'Pedro', 'Castro', '912345890', 'pedro.castro@example.com', 'password9', 'barbero', 1);
INSERT INTO usuario (tipoDeDocumento, numeroDeDocumento, nombre, apellido, celular, email, password, rol, activo) VALUES ('dni', '33445566', 'Carmen', 'Vega', '987654234', 'carmen.vega@example.com', 'password10', 'cliente', 1);

INSERT INTO categorias (nombre) 
VALUES ('Servicios');

INSERT INTO categorias (nombre) 
VALUES ('Productos para el Cabello');

INSERT INTO categorias (nombre) 
VALUES ('Herramientas');

INSERT INTO categorias (nombre) 
VALUES ('Cuidado de la Piel');

INSERT INTO categorias (nombre) 
VALUES ('Afeitado');

INSERT INTO categorias (nombre) 
VALUES ('Coloración');

INSERT INTO categorias (nombre) 
VALUES ('Tratamientos');

INSERT INTO categorias (nombre) 
VALUES ('Shampoo');

INSERT INTO categorias (nombre) 
VALUES ('Acondicionador');

INSERT INTO categorias (nombre) 
VALUES ('Mascarillas');


-- Insertar citas iniciales con estado 'pendiente'
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (TO_DATE('2024-10-31', 'YYYY-MM-DD'), '10:00 AM', 'Corte de cabello', 'pendiente', 1, 3);
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (TO_DATE('2024-11-01', 'YYYY-MM-DD'), '11:00 AM', 'Corte y barba', 'pendiente', 1, 3);
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (TO_DATE('2024-11-02', 'YYYY-MM-DD'), '12:00 PM', 'Afeitado completo', 'pendiente', 4, 7);
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (TO_DATE('2024-11-03', 'YYYY-MM-DD'), '1:00 PM', 'Corte de cabello', 'pendiente', 8, 3);
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (TO_DATE('2024-11-04', 'YYYY-MM-DD'), '2:00 PM', 'Corte y barba', 'pendiente', 4, 7);

INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (TO_DATE('2024-11-04', 'YYYY-MM-DD'), '2:00 PM', 'VENDIDO Corte y barba', 'pendiente', 1, 3);
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (TO_DATE('2024-11-04', 'YYYY-MM-DD'), '2:00 PM', 'VENDIDO Corte y barba', 'pendiente', 4, 7);
INSERT INTO citas (fecha, hora, nota, estado, id_cliente, id_barbero) VALUES (TO_DATE('2024-11-04', 'YYYY-MM-DD'), '2:00 PM', 'VENDIDO Corte y barba', 'pendiente', 5, 3);

select * from citas;

select * from usuario;

select * from pagos;

-- Actualizar la quinta cita a 'cancelado'
BEGIN
    actualizar_estado_cita(5, 'cancelado');
END;

BEGIN
    INSERT INTO pagos (id_cita, corte_realizado, monto, fecha_pago, hora_pago, status)
    VALUES (1, 'Corte de cabello', 50.00, TO_DATE('2024-10-31', 'YYYY-MM-DD'), '10:15 AM', 1);
END;

BEGIN
    INSERT INTO pagos (id_cita, corte_realizado, monto, fecha_pago, hora_pago, status)
    VALUES (2, 'Corte de barba', 60.00, TO_DATE('2024-10-31', 'YYYY-MM-DD'), '10:55 AM', 1);
END;



select * from pagos;

select * from citas;

select * from usuario;

DESC pagos;



select * from categorias;
select * from usuario;
select * from productos;
select * from pagos;
select * from citas;



-- 1. Inserciones en la tabla citas

-- Asegúrate de utilizar IDs de clientes y barberos que existan en la tabla usuario:



-- Inserción de una venta con productos
DECLARE
    v_monto_total NUMBER;
    v_productos SYS_REFCURSOR;
BEGIN
    OPEN v_productos FOR
        SELECT id_producto, 2 AS cantidad, precio
        FROM productos
        WHERE id_producto IN (1, 2); -- Usar IDs válidos de productos

    registrar_venta(p_id_usuario => 1, p_productos => v_productos, p_monto_total => v_monto_total);

    DBMS_OUTPUT.PUT_LINE('Monto total de la venta: ' || v_monto_total);
END;



select * from categorias;

-- Inserción de productos
INSERT INTO productos (imagen, nombre, descripcion, precio, stock, unidad_medida, fecha_ingreso, fecha_expiracion, estado, id_categoria)
VALUES ('/images/champu.jpg', 'Champú', 'Champú para todo tipo de cabello', 10.50, 100, 'unidades', SYSDATE, NULL, 1, 1);

INSERT INTO productos (imagen, nombre, descripcion, precio, stock, unidad_medida, fecha_ingreso, fecha_expiracion, estado, id_categoria)
VALUES ('/images/jabon_liquido.jpg', 'Jabón Líquido', 'Jabón líquido para manos', 5.00, 50, 'litros', SYSDATE, NULL, 1, 2);

INSERT INTO productos (imagen, nombre, descripcion, precio, stock, unidad_medida, fecha_ingreso, fecha_expiracion, estado, id_categoria)
VALUES ('/images/galletas.jpg', 'Galletas', 'Galletas de chocolate', 3.00, 200, 'gramos', SYSDATE, NULL, 1, 3);


-- Inserción en la Tabla ventas

DECLARE
    v_monto_total NUMBER;
    v_productos SYS_REFCURSOR;
BEGIN
    -- Abrir un cursor para los productos que se van a vender
    OPEN v_productos FOR 
        SELECT id_producto, cantidad, precio_unitario
        FROM (SELECT 1 AS id_producto, 2 AS cantidad, 10.50 AS precio_unitario FROM dual UNION ALL
              SELECT 2 AS id_producto, 3 AS cantidad, 5.00 AS precio_unitario FROM dual);

    -- Llamar al procedimiento para registrar la venta
    registrar_venta(1, v_productos, v_monto_total);

    DBMS_OUTPUT.PUT_LINE('Venta registrada con monto total: ' || v_monto_total);
END;
/

select * from ventas;

select * from detalle_venta;


-- Primera venta
DECLARE
    v_monto_total_venta1 NUMBER;
    v_productos_venta1 SYS_REFCURSOR;
BEGIN
    OPEN v_productos_venta1 FOR 
        SELECT id_producto, cantidad, precio_unitario
        FROM (SELECT 1 AS id_producto, 2 AS cantidad, 10.50 AS precio_unitario FROM dual);

    registrar_venta(1, v_productos_venta1, v_monto_total_venta1);
    DBMS_OUTPUT.PUT_LINE('Venta 1 registrada con monto total: ' || v_monto_total_venta1);
END;
/

-- Segunda venta
DECLARE
    v_monto_total_venta2 NUMBER;
    v_productos_venta2 SYS_REFCURSOR;
BEGIN
    OPEN v_productos_venta2 FOR 
        SELECT id_producto, cantidad, precio_unitario
        FROM (SELECT 2 AS id_producto, 1 AS cantidad, 5.00 AS precio_unitario FROM dual);

    registrar_venta(1, v_productos_venta2, v_monto_total_venta2);
    DBMS_OUTPUT.PUT_LINE('Venta 2 registrada con monto total: ' || v_monto_total_venta2);
END;
/


-- Ejemplo de una venta con múltiples detalles
DECLARE
    v_monto_total NUMBER;
    v_productos SYS_REFCURSOR;
BEGIN
    -- Abrir un cursor para los productos que se van a vender
    OPEN v_productos FOR 
        SELECT id_producto, cantidad, precio_unitario
        FROM (SELECT 1 AS id_producto, 2 AS cantidad, 10.50 AS precio_unitario FROM dual UNION ALL
              SELECT 2 AS id_producto, 1 AS cantidad, 5.00 AS precio_unitario FROM dual UNION ALL
              SELECT 3 AS id_producto, 3 AS cantidad, 20.00 AS precio_unitario FROM dual);

    -- Llamar al procedimiento para registrar la venta
    registrar_venta(1, v_productos, v_monto_total);

    -- Mostrar el monto total de la venta
    DBMS_OUTPUT.PUT_LINE('Venta registrada con monto total: ' || v_monto_total);
END;
/


SELECT 
    c.id_cita,
    c.fecha,
    c.hora,
    c.nota,
    c.estado,
    u_cliente.nombre AS nombre_cliente,
    u_cliente.apellido AS apellido_cliente,
    u_barbero.nombre AS nombre_barbero,
    u_barbero.apellido AS apellido_barbero
FROM 
    citas c
INNER JOIN 
    usuario u_cliente ON c.id_cliente = u_cliente.id_usuario
INNER JOIN 
    usuario u_barbero ON c.id_barbero = u_barbero.id_usuario
WHERE 
    u_cliente.rol = 'cliente' AND u_barbero.rol = 'barbero';

